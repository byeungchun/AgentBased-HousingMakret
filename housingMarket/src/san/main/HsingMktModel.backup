package san.main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

import org.apache.log4j.Logger;

import san.entity.GovernmentAgent;
import san.entity.HouseholdNode;
import san.logic.GovernmentLgic;
import san.logic.MarketLgic;
import san.logic.SocialIdxLgic;
import san.logic.StdDstLgic;
import san.test.TestNodeDistribution;
import san.util.ResultWriter;
import uchicago.src.sim.analysis.NetSequenceGraph;
import uchicago.src.sim.analysis.OpenSequenceGraph;
import uchicago.src.sim.engine.BasicAction;
import uchicago.src.sim.engine.Schedule;
import uchicago.src.sim.engine.SimInit;
import uchicago.src.sim.engine.SimModelImpl;
import uchicago.src.sim.gui.AbstractGraphLayout;
import uchicago.src.sim.gui.DisplaySurface;
import uchicago.src.sim.util.Random;

public class HsingMktModel extends SimModelImpl{

	private static Logger log = Logger.getLogger(HsingMktModel.class);
	
	private int numNodes =100;
	private int marketXSize = 5000;
	private int marketYSize = 5000;
	private double avgLinks = 20.0D;
	private double stdDev = 2.0D;
	
	//주택 시장에서 사용하는 전역 변수
	//protected int contractHouses = 9;
	protected int mktPurschasingIdx = 90;
	protected int housingPrice = 10000000;
	protected LinkedList<Integer> historyHousingPrices = new LinkedList<Integer>(); 
	protected int prvNumBidNodes = 0;
	
	protected List<HouseholdNode> agentList = new ArrayList<HouseholdNode>();
	protected GovernmentAgent governmentA = new GovernmentAgent();
	
	protected String layoutType = "Fruch";
	protected DisplaySurface surface;
	protected Schedule schedule;
	protected AbstractGraphLayout graphLayout;
	protected BasicAction initialAction;
	protected int updateEveryN = 5;
	
	private FileWriter resultFile = null;
	
	public LinkedList<Integer> getHistoryHousingPrices(){
		return historyHousingPrices;
	}
	
	public int getHousingPrice() {
		return housingPrice;
	}

	public void setHousingPrice(int housingPrice) {
		this.housingPrice = housingPrice;
	}

	public int getPrvNumBidNodes() {
		return prvNumBidNodes;
	}

	public void setPrvNumBidNodes(int prvNumBidNodes) {
		this.prvNumBidNodes = prvNumBidNodes;
	}

	public GovernmentAgent getGovernmentAgent(){
		return governmentA; 
	}
	
	public int getNumNodes() {
		return numNodes;
	}

	public void setNumNodes(int numNodes) {
		this.numNodes = numNodes;
	}

	public int getMarketXSize() {
		return marketXSize;
	}

	public void setMarketXSize(int marketXSize) {
		this.marketXSize = marketXSize;
	}

	public int getMarketYSize() {
		return marketYSize;
	}

	public void setMarketYSize(int marketYSize) {
		this.marketYSize = marketYSize;
	}

	public double getAvgLinks() {
		return avgLinks;
	}

	public void setAvgLinks(double avgLinks) {
		this.avgLinks = avgLinks;
	}

	public double getStdDev() {
		return stdDev;
	}

	public void setStdDev(double stdDev) {
		this.stdDev = stdDev;
	}
	
	public List<HouseholdNode> getAgentList(){
		return agentList;
	}

	@Override
	public void begin() {
		BuildModel.buildModel(this);
		BuildModel.buildDisplay(this);
		buildSchedule();
		graphLayout.updateLayout();
		surface.display();
		
	}
	
	private void buildSchedule(){
		initialAction = schedule.scheduleActionAt(1, this, "initialAction");
		schedule.scheduleActionBeginning(2,this, "mainAction");
		schedule.scheduleActionAtInterval(10, this,"writeResult");
		schedule.scheduleActionAtInterval(100, this,"doGovernmentAction");
		
	}
	
	public void initialAction() {
		StdDstLgic.stdDstInit(this);
//		randomMeeting(); //테스트 용 . 노드의 연결이 랜덤하게 이루어 진다고 가정할 경우
		TestNodeDistribution.checkDistribution(agentList);
		graphLayout.updateLayout();
		surface.updateDisplay();
	}
	
	public void mainAction(){
		//1. 이웃간의 주택 심리 지수를 계산하여 노드 심리지수를 계산
		SocialIdxLgic.calNodeSocialIdx(this);
		//2. 매매 시장 참여 1차 후보자 선정
		SocialIdxLgic.choose1stCandidate(agentList);
		//3. 매매 시장 참여 후보자 확정
		SocialIdxLgic.chooseFinalCandidate(this);
		//4. 정부의 공급 수량과 매매 참여자 비교하여 주택 가격 결정
		MarketLgic.decideHousePrice(this);		
	}
	
	public void writeResult() throws IOException{
		ResultWriter.writeResult(this, resultFile);		
	}
	
	public void doGovernmentAction(){
		GovernmentLgic.decidePolcy(this);
	}
	
	private void randomMeeting(){
		log.debug("노드수 " + numNodes);
		
	    for (HouseholdNode iNode : agentList) {
	    	int maxDegrees = Random.uniform.nextIntFromTo(1, 10);
	    	log.debug("노드 " + iNode.getIdx() + "의 링크 수  : " + maxDegrees);
	      for(int i = 0 ; i < maxDegrees ; i++){
	    	iNode.meetRandom(agentList, 10);
	      }
	    }
	}
	
	@Override
	public String[] getInitParam() {
		String[] params = {"numNodes", "marketXSize", "marketYSize", "avgLinks", "stdDev","Plot"};
		return params;
	}

	@Override
	public String getName() {
		return "Housing Market Model";
	}

	@Override
	public Schedule getSchedule() {
		return schedule;
	}

	@Override
	public void setup() {
		Random.createUniform();
		if(surface != null) surface.dispose();
		surface = null;
		schedule = null;
		System.gc();
		
		historyHousingPrices.add(housingPrice);
		Calendar cal = Calendar.getInstance();
	    String dateString, timeString;

		dateString = String.format("%02d%02d", cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH));
	    timeString = String.format("%02d%02d%02d", cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND));

		try{
			if(resultFile != null) resultFile.close();
			
			resultFile = new FileWriter(new File("./result/result"+dateString+"_"+timeString));
		}catch(Exception e){
			log.error("결과 파일 생성 실패 " + e.toString());
			System.exit(-1);
		}
		
		
		surface = new DisplaySurface(this, "Housing Market Model Display");
		registerDisplaySurface("Main Display", surface);
		schedule = new Schedule();
		agentList = new ArrayList();
		
	}

	
	public static void main(String[] agrs){
		SimInit init = new SimInit();
		HsingMktModel model = new HsingMktModel();
		init.loadModel(model, "", true);
	}
}
